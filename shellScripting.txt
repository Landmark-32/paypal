#Ngoh Tezoh

Platform/Kubernetes/Infrastructure Engineering
============================================

Automating IT processes/workloads with GUI/CLI and Scripting
=============================================================
Automating IT:
   processes
   workloads 
   jobs    
   tasks  

We need computer systems to carryout tasks:
===========================================
Computer/systems:
  1. Bare Metal / HardWare components 
      RAM - memory 
      Cpu 
      ROM - hard disk / volume / storage 
      MOUSE
      KEYBOARD
      Screen
  2. Software components 
      operating system = OS [This is the heart a computer] : 
        Windows OS [ 7/xp/8/9/10/11 ]
        MacOS 
        Solaris  
        Linux  OS:
          Radhat 6/7/8/9 / 
          ubuntu  [16/18/20/22] / 
          centos 6/7/8/9 / 
          debain / amazon Linux / suse / etc.  
      and
      other softwares :
         shell 
         Sublime text
         mobaXterm / gitbash / telegram /    
         Microsoft word/Excell  

Examples of workloads:
  fileMGT / userMGT / packageMGT/ securityMGT / systemMGT / etc.

Workload management on Computer systems [LINUX OS] :
    GUI: = Graphical user interface  -- 5%
    CLI: = command line interface    -- 
            aws ec2 describe-instances  
     Linux OS = Linux servers/systems
      ls:   = list the content of a directory
      touch test.txt

    scripts: a shell-script is a collection of one or more commands in a file 
             a script is a file containing commands  
    write a simple script that welcomes Engineers to work?
    welcome.sh
    ==========
     #!/bin/bash 
     echo "Good morning"
     whoami
     echo "Welcome to Landmark Technologies" 
     echo "Today is"
     date 
     run the script by:
       ./scriptName
       ./welcome.sh
       ./script1.sh
[oke@demo22 ~]$  ./welcome.sh
-bash: ./welcome.sh: Permission denied
[oke@demo22 ~]$ ll
-rw-r--r--. 1 oke oke 107 May 18 19:42 welcome.sh
 644 Permissions  
 The file/script need executable Permissions to run  
    chmod 744 welcome.sh  
    chmod  u+x scriptName 
    chmod   +x scriptName  
   [oke@demo22 ~]$ ll
   -rwx-r--r--. 1 oke oke 107 May 18 19:42 welcome.sh
Assign executable Permission:
  chmod +x fileName   
  chmod +x script1.sh
  chmod 775 fileName 
  chmod 700 fileName 

    shell: A shell is an interpreter that interpretes commands to the OS. 

shells command interpreters:
  Boune Shell  (sh)
  Boune Again Shell (bash)
  csh / ksh / tsh / zsh  

  echo $SHELL       =  List your current shell
      /bin/bash
  cat /etc/shells   = List all shells in your system
     /bin/sh
     /bin/bash
     /usr/bin/sh
     /usr/bin/bash
     /bin/csh
     /bin/tcsh
     /usr/bin/csh
    /usr/bin/tcsh

  sudo yum install ksh zsh -y 
  [oke@demo22 ~]$ cat /etc/shells
/bin/sh
/bin/bash
/usr/bin/sh
/usr/bin/bash
/bin/csh
/bin/tcsh
/usr/bin/csh
/usr/bin/tcsh
/usr/bin/zsh
/bin/zsh
/bin/ksh
/bin/rksh
/usr/bin/ksh
/usr/bin/rksh

  bash -c ls  or ls   
  cat /home/oke/welcome.sh  [accessing the file using the absolute path]
  cat welcome.sh  [accessing the file using the relative path]

Bash shell Scripting:

Naming convention:
Naming conventions best practices:
bash Shell-scripts   = script.sh or hello.sc  
Shell-scripts has '.sc' or '.sh' extensions 
    scriptname.sh  or 
    scriptName.sc or 
    *.sh or 
    *.sc 
  deploy.sh  = Shell-script [*.sh]
  test.txt   = text file    [*.txt]
  app.sc     = Shell-script [*.sc]
  app.java   = java code    [*.java] 
  monitor.py = python code/script [*.py] 
  app.yaml   = playbook or manifest file [*.yml] 
  main.tf    = terraform scripts/codes [*.tf]
==============================================
script1.sh  
#!/bin/bash
echo "Good morning Millionaire,"
whoami
echo Welcome to Landmark Technologies Millionaire Deployment
echo Today is,
date

[oke@demo22 ~]$ sh /home/oke/script1.sh
Good morning Millionaire,
oke
Welcome to Landmark Technologies Millionaire Deployment
Today is,
Thu May 18 20:13:41 EDT 2023
[oke@demo22 ~]$
[oke@demo22 ~]$ /home/oke/script1.sh
bash: /home/oke/script1.sh: Permission denied
[oke@demo22 ~]$
[oke@demo22 ~]$ sh script1.sh
Good morning Millionaire,
oke
Welcome to Landmark Technologies Millionaire Deployment
Today is,
Thu May 18 20:14:15 EDT 2023

Scripting or automation langauges :
  1. Bash Shell Scripting
  2. Python 
  3. Groovy  (Jenkins)
  3. Ruby
  4. Yaml  
      (k8s, Ansible, CloudFormation)
  5. JSon / java
  6. HCL - Terraform  
  7. XML = 
  8. html 
  9. go/golang 
  10. powershell 

Tasks - ticket0014:
  TK-deploy-00123 
write a shell simple script to deploy applications 
1. Create a deployment directory  
2. create a deployment; app.java file  
3. assign read Permission to app.java file
4. changing ownership of app.java file 
9. copy the file to the app directory  

How to make your codes/scripts:
  easily readable/understandable 
  1. by adding notes/comments/explanations 

comment.sh  
#!/bin/bash
echo 'single line comment starts'
# This script welcome Engineers to Landmark.
# comented lines starts with #
# Only run this script on Linux systems
# Author: Prof. Simon
# Copyright C Landmark Technologies
# whoami
date
echo welcome to Landmark Technologies millionaire deployment
echo 'single line comment ends'

mlc.sh 
echo "Multi-line comment starts"
<<boy
This script welcome Engineers to Landmark.
Only run this script on Linux systems
Author: Prof. Simon
Copyright C Landmark Technologies
pwd
boy
echo "Multi-line comment ends"
date
whoami

[oke@demo22 ~]$ sh mlc.sh
Multi-line comment starts
Multi-line comment ends
Thu May 18 20:40:35 EDT 2023
oke


<<rich
This script welcome Engineers to Landmark.
Only run this script on Linux systems
Author: Prof. Simon
Copyright C Landmark Technologies
pwd
rich

Who are the comments meant for?
  1. It make your script/code to be understood by you and others over time. 
  2. It make your script/code easily reusable in the future
  3. Facilitate/ease troubleshooting and debugging
  4. comments are Good for teams: Team of 14 
        6. developers writing codes/scripts 
        1. Scrum master 
        3. DevOps Engineers 
        1. DevOps Security Engineer 

Making your script portable.  
1. Hard coding 
2. soft coding   

using variables in scripting:
============================
name=SimonLegah
cpy=LandmarkTechnology
how to call variables in bash shell scripting:
  $variableName 
  ${variableName} 

var1.sh  
[oke@demo22 ~]$ cat var1.sh
#!/bin/bash
name=SimonLegah
cpy=LandmarkTechnology
echo "Good morning $name"
echo "Good morning ${name}"
echo Welcome to $cpy
echo Good morning ${name}, welcome to $cpy.

variables:
variables are defined by the either the user or the system 
we can refer/call a variable with $variable 

User defined variables   = UDV  : 
 Are defined/created by some admins  
udv.sh  
 name=SimonLegah
 cpy=LandmarkTechnology  
 city=Toronto
 country=Canada  
 echo $name works for $cpy located in $city, $country    

system defined variables   = SDV  : 
 SDV Are variables that comes with the OS  
 Such variables are in uppercase  
  SHELL=bin/bash
  echo $SHELL  = /bin/bash
  env = List all system defined variables  

sdv.sh 
city=Toronto
APP=TeslaApplication
echo $USER works for LandmarkTechnology, $city
echo $PWD
echo $SHELL
echo This $APP is the best version in the market.
# udv are or should be written in lowercase. Highly recomended
# sdv  are written in upper case

[oke@demo22 ~]$ env
SHELL=/bin/bash
HISTCONTROL=ignoredups
SYSTEMD_COLORS=false
HISTSIZE=1000
HOSTNAME=demo22
PWD=/home/oke
LOGNAME=oke
HOME=/home/oke

start writing your script with shebang [#!] /bin/sh]

MTN =    


   export class=DevOpsMasterClass

system defined variables:
  echo sdv starts  
   echo $HISTSIZE  
   echo $USER 
   echo $HOME  
   echo $PATH  
   echo $LOGNAME
   echo $SHELL 
echo sdv ends   

[oke@demo22 ~]$  echo $HISTSIZE
                 1000
export HISTSIZE=2000
=============================

dynamic script  :
  1. echo $name Welcome to $cpy  

static script:
  1. echo Oke Welcome to MTN    

$name Welcome to Landmark Technology

User defined variables:
var1.sh 
   name=SimonLegah 
   cpy=LandmarkTechnology
   echo $name Welcome to $cpy  

write a script to authenticate bank users:
===========================================
[oke@demo22 ~]$ cat read1.sh
echo 'Please enter your name'
read name
echo "$name, welcome to TD Bank"
echo 'please enter your card'
echo 'please enter your pin'
read pin
echo "$pin is the correct pin, $name, how may we help you today?"

======================================
TICKET0045: Write a scipt to dynamically create users. 
   userMGT commands: adduser / usermod / userdel /  groupadd / groupdel 
      sudo adduser/userdel/usermod/ groupadd / groupdel 
userCreate.sh  
[oke@demo22 ~]$ cat createuser.sh
#!/bin/bash
# This script requires root/sudo access
echo "Please enter the name of the newUser"
read newuser
echo "Now ready to create $newuser account "
sudo adduser  $newuser
echo "$newuser account is created successfully"
grep $newuser /etc/passwd # to verify
[oke@demo22 ~]$

IQ: Explain your experience in shell scripting  ?
1. using bash shell scripts for userMGT. 100% [New Graduate]    
2. In my environment/company/Landmark i use scripting for userMGT for over 5 years. 

userMGT.sh  :   
echo "creating a newuser account" 
echo "enter the new username's name"
read name  
sudo adduser $name 
sudo usermod -aG manager $name   
id $name 

bank.sh   
-------
echo "Please enter your name"
read name
echo "$name, welcome to TB Bank"
echo "Please enter your pin"
read -s pin  # -s pass a secret variable
echo "$name you entered an invalid pin"
[obi@sc ~]$

Security is inherent in our environment.  

Command Line Arguments = CLAs  
===============================
TICKET0047: write a script to backup databases in our environment.  
touch db_backup.sh
 echo "echo database backup initiated" > db_backup.sh
 echo "echo database backup completed" >> db_backup.sh

-# sh script.sh  arg1  arg2  arg3 ...  agr10
-#     $o         $1    $2    $3       $10

cla.sh   
#echo please pass 3 arguments with your script
echo "The 1st argument is $1"
echo "The 2nd argument is $2"
echo "The 10th argument is ${10}"
echo The number argument is $#
echo The list of  argument are $@
echo The list of  argument are $*
Date
echo The status of your last run command is $?
mkdir backup
cp *  backup/
echo The process id is  $$


[oke@demo22 ~]$ echo $?
127
[oke@demo22 ~]$ cat ss
cat: ss: No such file or directory
[oke@demo22 ~]$ echo $?
1

IQ: What is the significance of $? in scripting.
  It gives the status of your last run command.
  The value can be = 0 [Its okay]   or 
  The value can be = 1-127 [Its not okay]   

[oke@demo22 ~]$ ls
app      cla.sh         db_backup.sh  mlc.sh      sdv1.sh  usermgt.sh
backup   comment.sh     deploy.sh     read1.sh    sdv2.sh  var1.sh
bank.sh  createuser.sh  deployment    script1.sh  udv1.sh  welcome.sh
[oke@demo22 ~]$ echo $? = 0
[oke@demo22 ~]$ LS
-bash: LS: command not found
[oke@demo22 ~]$ echo $? = 127
[oke@demo22 ~]$ cat ss
cat: ss: No such file or directory
[oke@demo22 ~]$ echo $? = 1


command Line arguments:
    The 1st argument is  = $1"
    The 2nd argument is  = $2"
    The 3rd argument is  = $3"
    The 6th argument is  = $6"
    The scriptName  is   = $0"
    The 10th argument is = ${10}"
    The number argument is $#
    The list of argument are $@
    The list of argument are $*
    The status of the last run command is = $?  
    The process id is = $$  

CLA = $? displays the status of your   
  last run command with 2 possible values 
     $? = 0 = command ran successfully
     $? = 1-127 = something is wrong        

  1-127 are error codes :
      1   = 
      2   = 
      3   = 
      127 = 

An argument, also called command line argument, 
can be defined as input given to a command line 
to process that input with the help of given command. 
Argument can be in the form of a file or directory. 
Arguments are entered in the terminal or console after entering command.

sudo service sshd 

cat deploy.sc     
if [ $?==0 ] 
then
echo "We succeeded" 
else  
echo "We failed, please troubleshoot" 
fi  

cat deploy.sc     
if [ $#==3 ] 
then
echo "We succeeded" 
else  
echo "Please pass 3 arguments with your script" 
fi 

Inequality signs :
=================
-eq  or  == represent equals to 
           (( $? == 0 )) [ X -eq = y]
-ne  or  != represent not equals to 
-gt  or  >  represent greater than
-lt  or  <  represent less than 
-ge  or >= greater than or equals to
-le  0r <= less than  or equals to 

if [ votes -gt 50% ]
then 
echo he won the elections 
fi  

conditions :
if statement  
Syntax:
if (( conditions ))
then 
commands 
else  
commands  
fi

if1.sh  

echo "welcome to Landmark DevOpsMasterClass" 
echo "How much are you willing to pay"
read price
if [ $price -ge 4000 ]
then 
echo "your are admitted"  
else  
echo "sorry you can't be admitted today "
fi  

if2.sh   
echo "Please enter for pin"
read pin  
if (( $pin == 4100 ))
then 
echo "You have entered the correct pin"
echo "Thank you for banking with TD Bank"
else  
echo "sorry you entered the wrong pin"
echo "your account is blocked for your protection"
echo "Please visit a branch for further assistance"
fi  


---
Debugging issues:
vi debug.sh   
==========
whoami  
Date  
Pwd 
echo $?   
whatis ls  
echo $?  
echo $$ 

IQ: How do you troubleshoot issues in scripting??
    run the script in debugging mode  
    sh -x scriptName   

Debugging problems in scripting  
===============================
  sh -x scriptName  

Input output redirection  
=============================
Standard output  
standard error  
Redirect Standard output --   :   
  sh scriptName > log  
  sh debug.sh > log or sh debug.sh 1> log  

Redirect Standard errors --   : 
  sh scriptName 2>fileName   
  sh debug.sh 2>error.log  

Redirect Standard output & errors --   :
  sh scriptName  > fileName  2>&1 
  sh debug.sh  > all.log  2>&1 

tail -5 /etc/passwd > users.txt

tail -1 /etc/passwd > new-users.txt   = This will replaced existing content  
tail -1 /etc/passwd >> new-users.txt  = This will add to existing content  

USING Scripts for package management:
====================================
We can install, remove, updates and 
upgrade packages in our servers.
examples of packages:
  nano, tree, vim, httpd, 
  java, maven, tomcat, jenkins,
  kubernetes, kubelet, docker
  terraform, etc.  
We can download and install packages 
using package managers like:
   yum/dnf          -- centos, redhat
   apt/apt-get      -- ubuntu, debain
   chocolatey/choco -- windows OS  
   brew             --  mac  
   helm,  -- kubernetes 
   pip,   -- python 
   rpm 

centos/redhat/amazon linux/:
  yum install nano 

packages.sh 
#!/bin/sh
#This script will install and start the apache ht webServer
 sudo yum install httpd -y
 sudo systemctl start httpd
 sudo systemctl enable httpd
 ps -ef | grep httpd
 systemctl status httpd

 fileMGT_index.html
 ------------------
 [oke@demo22 ~]$ cat index.hmtl
<h1> Welcome to LandmarkTech </h1>
<h2>The Pride of Africa</h2>

sudo vi  /var/www/html/index.html
<h1> Welcome to LandmarkTech </h1>
<h2>The Pride of Africa</h2>
<h2>The Pride of Africa</h2>
<h3>The Pride of Africa</h3>
<h4>The Pride of Africa</h4>
~

=========================================
control commands = conditions:
==============================
if statements:
Syntax:  
  if [ conditions ] 
  then 
  commands  
  else  
  commands
  fi 

or
  if (( conditions ))
  then 
  commands  
  else  
  commands
  fi 
[oke@demo22 ~]$ cat if3.sh
echo "Please enter your ticket prediction"
read ticket
if [ $ticket == 4008 ]
then
echo You are the winner
else
echo please try again
fi

if4.sh 
=====
# This script determines 1st class students
echo 'ENTER YOUR GPA'
read gpa
if [ $gpa -ge 4 ]
then
echo "Congratulations,"
echo "You are a 1st class student"
elif [ $gpa -ge 3 ]
then 
echo "Congratulations,"
echo "You are a 2nd class student"
else
echo "You can do better"
fi

if5.sh
#!/bin/bash
# realtor selling a property
echo "How much is customer1 offering?"
read offer1
echo "How much is customer2 offering?"
read offer2
if [ $offer1 -gt $offer2 ]
then
echo "Customer1 has a better offer"
echo "Sell to Customer1"
elif [ $offer1 -lt $offer2 ]
then
echo "Customer2 offer is better"
echo "Sell to Customer2"
else
echo "We have a tie of $offer1"
echo "Request for an increase and choose the best possible offer"
fi

---
if6.sh  
-----
echo "enter username"  
read p    
echo "Your username is $p "

echo "Creating a new user"
if (( uid == 0 ))
then  
echo "you have Permission to add users to the server"
echo "enter the name of the new user"
read name   
adduser $name  
else  
echo "sorry only the root can run this script"
fi  

if6b.sh 
------
if [ uid == 0 ]
then
echo read username
read username
echo "Creating $username user account"
useradd $username
else
echo "sorry only the root can run this script"
fi

=====
if (( $# == 3 ))
then 
echo "scripting i good"
echo "Always run this script with 3 arguments"
else 
echo "Please enter 3 arguments to run this script"
fi 

if [ $# == 3 ]
then 
echo "scripting i good"
echo "Always run this script with 3 arguments"
else 
echo "Please enter  3 arguments to run this script"
fi 

Echo Jesus is Lord  
if [ $? == 0 ]
then 
echo "scripting is good"
else 
echo "Please troubleshoot issues observed"
fi 

if [ condition ]
then 
command1 
command2
elif [ condition ]
then 
command1 
command2
elif [ condition ]
then 
command1 
command2
else 
command1 
command2
fi   


Loops:
for  loop  
=========
Loops: condition with multiple iterations 
x < 100 
z=0 

Syntax:
for loop  
for [ initiallation;conditions;inc/dec ]
do  
execute all command/script until the condition is 
longer met/satisfied. 
(And repeat all statement between do and done) 
done  

c/c++/java:

for (( initiallation;conditions;inc/dec ))
{
  write statements/commands
}

shell-script:
for loops:
==========
for (( initiation;conditions;inc/dec ))
do 
commands 
commands 
done

fl.sh  
for  (( a=1;a<=5;a++ )) 
do  
echo $a   
done  

Expected output:
================
a=1
a=1 + 1 = 2  
a=2 + 1 = 3   
a=3 + 1 = 4     
loop will break    
a=4 + 1 = 5    


Assignment:
Write a shell script to print numbers from 100-90 
using for-loop [100, 99, 98, ---, 90]
while loop  


while loop: ===
Syntax:
initiallation 
while [ condition ]
do 
commands/statements
done

yl.sh
=====  
echo "while loop starts"
echo "performing load testing for tesla"
l=10000
while [ $l -le 90000 ]
do
echo "Carrying load of "
echo $l
l=`expr $l + 10000 `
done
echo "while loop ends"

output:
  performing load testing
  l = 10000
  
  performing load testing
  l = 10000 + 10000 = 20000

  performing load testing
  l = 20000 + 10000 = 30000 

  performing load testing
  l = 80000 + 10000 = 90000

use cases for loops:
===================
To run load test  
To get range of values   
====================

yl2.sh  
----
i=9  
while [ $i -ge 1 ]   
do  
echo $i 
i=`expr $i - 1 `  
done   

output:
  i = 9  
  i = 9 - 1 = 8  
  i = 8 - 1 = 7  
  i = 7 - 1 = 6   
  i = 6 - 1 = 5  
  i = 5 - 1 = 4
  i = 4 - 1 = 3 
  i = 3 - 1 = 2 
  i = 2 - 1 = 1 

function
switch cases  
crontab  

Git  
---

if/else     
 shebang mandatory  
 fileMGT dir  


====================================
Linux 7 running notes
==========================================

switch case:
  systemctl start|status|restart|stop|enable|disable sshd 
  yum install/remove/updates/upgrade

tomcat:
  catalina.sh | status | restart | stop | start | version
  catalina.sh start tomcat 
  catalina.sh stop  tomcat   
  catalina.sh restart  tomcat   
sonarQube:
  sonar.sh  | status | restart | stop | start | version

Command Line arguments:
  catalina.sh stop tomcat
    $0        $1     $2   

Syntax for switch case:
case $1 in  
    option1)
      Commands;;
    option2)
      Commands;;
    option3)
      Commands;;
    *)
      Commands;;
esac 
=====
switch-case.sh   
echo "switch case starts"
case $1 in   
    start)
      echo "sonarQube server starting"
      echo "sonarQube server started" ;;
    stop)
      echo "sonarQube server stopping"
      echo "sonarQube server stopped" ;; 
    restart)
      echo "sonarQube server restarting"
      echo "sonarQube server restarted" ;; 
    *)
      echo "you entered an invalid option"
      echo "Please enter start, stop or restart option" ;;
esac  
echo "switch case ends"
----
functions :
  Functions:   
 A function is a piece of code that perfoms
 a specific task and avoids repetition/duplication.

usermgt(){
  echo "Enter the username of the new user"
  read name
  sudo adduser $name
  echo $name account is created successfully
  tail -1 /etc/passwd
  grep $name /etc/passwd
}

filemgt(){
  if [ -e /etc/passwd ]
  then
   echo "File management"
   echo "The file exist. Please proceed ..."
   grep simon /etc/passwd
   touch test.java /home/simon/
  else
    echo "It doesn't exist"
  fi
}
packagemgt(){
  sudo yum update -y
  sudo yum install tree nano vim unzip -y
}
db_backup(){
  cp -r * /tmp/backup/
}
monitoring(){
  df -h
  free -m
  top
}
usermgt
filemgt

sonarQube used for Code quality analysis:
  1- Free from duplications          


Ticker00147_create a new user in our environment:
============================================= 
1. import/call/invoke the usermgt function

cronJobs 
scp  
====

Break time:
  8:50pm

Examples of autamted tasks:
  Explain your experience in bash shell scripting??
AMSWER:
 In my environment I have written, Maintained/modified
  shell scripts to:
    monitor_servers.sh  
    dataBase_backup.sh 
    deploy_app.sh 
    access_account.sh  
    user_management.sh  
    file_management.sh  

scp command:
  It is use to transfer files from one server to another and vice-versa
  It is good for data migration, application deployment, etc. 
  scp tranfer files and directory securely using the ssh protocol 

Password for authentication:
   scp filename ubuntu@52.201.217.3 
   scp filename username@ipaddress   

   scp -r direname ubuntu@52.201.217.3 
   scp -r direname username@ipaddress 

ssh-key for authentication:
   scp -i key.pem app.war  ubuntu@52.201.217.3 
   scp -i key.pem filename username@ipaddress   

   scp -i key.pem -r direname ubuntu@52.201.217.3 
   scp -i key.pem -r direname username@ipaddress 

Path to files and directories: 
=============================
  Relative path: start From pwd    
  Absolute path: start From / (root)

/home/simon/  
[simon@demo app]$ pwd
/home/simon/app
touch test
touch /home/simon/app/list

[simon@demo app]$ ls
list  test
[simon@demo app]$ ls /home/simon/app
list  test

[simon@demo app]$ cat /home/simon/app/jj
echo JESUS IS LORD
[simon@demo app]$
[simon@demo app]$ sh /home/simon/app/jj
JESUS IS LORD
[simon@demo app]$ sh jj
JESUS IS LORD

cronJobs:
==========
Scheduling Tasks/Workloads for automation.
Assignment/Ticket:
  1. Write a script that monitors servers every minutes 
     This script should alert management of anomalies 
  2. Write a script that backup dbServers every midnight

Execution:
1. We shall use cronJobs and create cron tables to achieve this 
   Automation and Schedule the tasks to run as expected. 

   cron table   = contains scheduled tasks   
   crontab -e   = To edit the cron table 
   crontab -l   = List the cron table

[simon@demo app]$ crontab -l
no crontab for simon
[simon@demo app]$ crontab -u simon -l 

Access to the crontab should be restricted because
 1. processes/Workloads consumes systems resources [cpu, Memory]
 2. some Tasks can affect processes and shutdown the system   

How to restrict crontab access:
   sudo touch /etc/cron.allow [simon]

       or   
   sudo touch /etc/cron.deny [simon]

monitor_server.sh
date
df -h 
free -m 
whoami 

Create Schedule a task to be executed every minute  
   /home/simon/monitor_server.sh
   monitor_server.sh

* * * * * /home/simon/monitor_server.sh >/dev/null 2>&1  

* * * * * /home/simon/monitor_server.sh >/tmp/mylog 2>&1

0 * * * * /home/simon/deploy.sh >/dev/null 2>&1

crontab generator online: 
  https://crontab-generator.org/

* * * * * /home/simon/monitor_servers.sh >/dev/null 2>&1
* * * * * /home/simon/monitor_servers.sh >/tmp/log 2>&1

* * * * * /home/simon/monitor_servers.sh >>/tmp/log 2>&1

*  = every minute 
*  = every hour
*  = every day 
*  = every month 
*  = every week 
==============

Team:
project 1
========
1. AWS Accounts are created for all team members 
2. Create a redhat8 linux server 
3. Connect to the redhat8 server using mobaXterm/terminal ssh-cleint 
4. Program or configure the server for password authentication   
5. Create a user call dominion and assign a password [admin123] 
6. Connect to your server using dominion's user
7. Run commands in the server as dominion's user 
    

project 2
========    
7. Connect to your server using dominion user's details  
8. Run your scripts as dominion user  

